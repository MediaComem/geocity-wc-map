import { Feature, Map } from 'ol';
import Geolocation from 'ol/Geolocation';
import { Geometry } from 'ol/geom';
import VectorLayer from 'ol/layer/Vector';
import { Vector } from 'ol/source';
import StoreFeature from '../types/store-feature';
import IOption from '../utils/options';
export declare class Store {
    static geolocation: Geolocation | undefined;
    static theme: string;
    customDisplay: boolean;
    targetBoxSize: string;
    options: IOption | undefined;
    map: Map | undefined;
    selectedFeatures: Array<StoreFeature>;
    borderConstraint: VectorLayer<Vector<Geometry>> | undefined;
    currentItemId: number;
    maxElement: number;
    static setTheme(newVal: string): void;
    static getTheme(): string;
    static setGeolocation(newVal: Geolocation): void;
    static getGeolocation(): Geolocation | undefined;
    setCustomDisplay(newVal: boolean): void;
    isCustomDisplay(): boolean;
    setTargetBoxSize(newVal: string): void;
    getTargetBoxSize(): string;
    setOptions(newVal: IOption): void;
    getOptions(): IOption | undefined;
    setMap(newVal: Map): void;
    getMap(): Map | undefined;
    addSelectedFeature(newVal: Feature, id: number, type: string): void;
    removeSelectedFeature(id: number): void;
    removeLastSelectedFeature(): void;
    getSelectedFeature(id: number): Feature<Geometry> | undefined;
    getCurrentFeatureType(id: number): string;
    unselectFeatures(): void;
    getSelectedFeatures(): Feature<Geometry>[];
    setBorderConstraint(newVal: VectorLayer<Vector<Geometry>> | undefined): void;
    getBorderConstraint(): VectorLayer<Vector<Geometry>> | undefined;
    setCurrentItemId(newVal: number): void;
    getCurrentItemId(): number;
    setMaxElement(newVal: number): void;
    getMaxElement(): number;
}
