import NotificationElement from '../../types/notification-element';
import NotificationBoxControl from '../notification/notification';
import Feature from 'ol/Feature';
import { Geometry, MultiPoint } from 'ol/geom';
export default class NotificationManager {
    validZoomConstraint: boolean;
    validAreaConstraint: boolean;
    validBorderContraint: boolean;
    validMaxElementConstraint: boolean;
    displayMaxElementConstraint: boolean;
    zoomNotificationControl: NotificationBoxControl | undefined;
    inclusionNotificationControl: NotificationBoxControl | undefined;
    maxElementNotificationControl: NotificationBoxControl | undefined;
    infosNotificationControl: NotificationBoxControl | undefined;
    borderContraintNotificationControl: NotificationBoxControl | undefined;
    constructor();
    displayRightNotification(): void;
    setupTargetMode(): void;
    iconClickedListener(): void;
    setupSelectMode(): void;
    iconCreatedListener(): void;
    setupCreateMode(): void;
    ruleValidationListener(): void;
    setupMixMode(): void;
    setup(notifications: Array<NotificationElement>): void;
    setupZoomContraint(rule: NotificationElement): void;
    setupInclusionAreaConstraint(rule: NotificationElement): void;
    setupMaxSelectionConstraint(rule: NotificationElement): void;
    hasValidZoom(rule: NotificationElement): boolean | 0 | undefined;
    checkZoomConstraint(rule: NotificationElement): void;
    checkInclusionAreaConstraint(isInInclusionArea: boolean, couldBypass: boolean | undefined): void;
    checkMaxElementContraint(features: Array<Feature>): void;
    checkIsInBorder(features: Array<Feature>): void;
    convertToMultiPoint(coordinate: number[]): Feature<MultiPoint>;
    formatGeometryCollection(geometries: Geometry[]): string;
    generateGeometryCollection(features: Array<Feature>): string;
    formatFeatureCollection(features: Feature[]): string;
    generateFeatureCollection(features: Feature[]): string;
    generateTargetGeometry(coordinate: number[]): string | undefined;
    generateExportData(features: Array<Feature>): string;
}
